// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/ava-labs/avalanche-network-runner/api"

	ids "github.com/ava-labs/avalanchego/ids"

	mock "github.com/stretchr/testify/mock"

	node "github.com/ava-labs/avalanche-network-runner/network/node"

	peer "github.com/ava-labs/avalanchego/network/peer"

	router "github.com/ava-labs/avalanchego/snow/networking/router"

	status "github.com/ava-labs/avalanche-network-runner/network/node/status"
)

// Node is an autogenerated mock type for the Node type
type Node struct {
	mock.Mock
}

// AttachPeer provides a mock function with given fields: ctx, handler
func (_m *Node) AttachPeer(ctx context.Context, handler router.InboundHandler) (peer.Peer, error) {
	ret := _m.Called(ctx, handler)

	if len(ret) == 0 {
		panic("no return value specified for AttachPeer")
	}

	var r0 peer.Peer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, router.InboundHandler) (peer.Peer, error)); ok {
		return rf(ctx, handler)
	}
	if rf, ok := ret.Get(0).(func(context.Context, router.InboundHandler) peer.Peer); ok {
		r0 = rf(ctx, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peer.Peer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, router.InboundHandler) error); ok {
		r1 = rf(ctx, handler)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAPIClient provides a mock function with no fields
func (_m *Node) GetAPIClient() api.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAPIClient")
	}

	var r0 api.Client
	if rf, ok := ret.Get(0).(func() api.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Client)
		}
	}

	return r0
}

// GetAPIPort provides a mock function with no fields
func (_m *Node) GetAPIPort() uint16 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAPIPort")
	}

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// GetBinaryPath provides a mock function with no fields
func (_m *Node) GetBinaryPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBinaryPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetConfig provides a mock function with no fields
func (_m *Node) GetConfig() node.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 node.Config
	if rf, ok := ret.Get(0).(func() node.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(node.Config)
	}

	return r0
}

// GetConfigFile provides a mock function with no fields
func (_m *Node) GetConfigFile() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfigFile")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetDataDir provides a mock function with no fields
func (_m *Node) GetDataDir() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDataDir")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetDbDir provides a mock function with no fields
func (_m *Node) GetDbDir() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDbDir")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetFlag provides a mock function with given fields: _a0
func (_m *Node) GetFlag(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFlag")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIP provides a mock function with no fields
func (_m *Node) GetIP() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIP")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetLogsDir provides a mock function with no fields
func (_m *Node) GetLogsDir() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogsDir")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetName provides a mock function with no fields
func (_m *Node) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetNodeID provides a mock function with no fields
func (_m *Node) GetNodeID() ids.NodeID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNodeID")
	}

	var r0 ids.NodeID
	if rf, ok := ret.Get(0).(func() ids.NodeID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ids.NodeID)
		}
	}

	return r0
}

// GetP2PPort provides a mock function with no fields
func (_m *Node) GetP2PPort() uint16 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetP2PPort")
	}

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// GetPaused provides a mock function with no fields
func (_m *Node) GetPaused() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPaused")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetPluginDir provides a mock function with no fields
func (_m *Node) GetPluginDir() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPluginDir")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetURI provides a mock function with no fields
func (_m *Node) GetURI() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetURI")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SendOutboundMessage provides a mock function with given fields: ctx, peerID, content, op
func (_m *Node) SendOutboundMessage(ctx context.Context, peerID string, content []byte, op uint32) (bool, error) {
	ret := _m.Called(ctx, peerID, content, op)

	if len(ret) == 0 {
		panic("no return value specified for SendOutboundMessage")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, uint32) (bool, error)); ok {
		return rf(ctx, peerID, content, op)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, uint32) bool); ok {
		r0 = rf(ctx, peerID, content, op)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte, uint32) error); ok {
		r1 = rf(ctx, peerID, content, op)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with no fields
func (_m *Node) Status() status.Status {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 status.Status
	if rf, ok := ret.Get(0).(func() status.Status); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(status.Status)
	}

	return r0
}

// NewNode creates a new instance of Node. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *Node {
	mock := &Node{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
