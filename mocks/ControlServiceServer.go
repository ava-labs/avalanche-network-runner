// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	rpcpb "github.com/ava-labs/avalanche-network-runner/rpcpb"
)

// ControlServiceServer is an autogenerated mock type for the ControlServiceServer type
type ControlServiceServer struct {
	mock.Mock
}

// AddNode provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) AddNode(_a0 context.Context, _a1 *rpcpb.AddNodeRequest) (*rpcpb.AddNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddNode")
	}

	var r0 *rpcpb.AddNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.AddNodeRequest) (*rpcpb.AddNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.AddNodeRequest) *rpcpb.AddNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.AddNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.AddNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPermissionlessDelegator provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) AddPermissionlessDelegator(_a0 context.Context, _a1 *rpcpb.AddPermissionlessDelegatorRequest) (*rpcpb.AddPermissionlessDelegatorResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddPermissionlessDelegator")
	}

	var r0 *rpcpb.AddPermissionlessDelegatorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.AddPermissionlessDelegatorRequest) (*rpcpb.AddPermissionlessDelegatorResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.AddPermissionlessDelegatorRequest) *rpcpb.AddPermissionlessDelegatorResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.AddPermissionlessDelegatorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.AddPermissionlessDelegatorRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPermissionlessValidator provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) AddPermissionlessValidator(_a0 context.Context, _a1 *rpcpb.AddPermissionlessValidatorRequest) (*rpcpb.AddPermissionlessValidatorResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddPermissionlessValidator")
	}

	var r0 *rpcpb.AddPermissionlessValidatorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.AddPermissionlessValidatorRequest) (*rpcpb.AddPermissionlessValidatorResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.AddPermissionlessValidatorRequest) *rpcpb.AddPermissionlessValidatorResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.AddPermissionlessValidatorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.AddPermissionlessValidatorRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSubnetValidators provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) AddSubnetValidators(_a0 context.Context, _a1 *rpcpb.AddSubnetValidatorsRequest) (*rpcpb.AddSubnetValidatorsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddSubnetValidators")
	}

	var r0 *rpcpb.AddSubnetValidatorsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.AddSubnetValidatorsRequest) (*rpcpb.AddSubnetValidatorsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.AddSubnetValidatorsRequest) *rpcpb.AddSubnetValidatorsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.AddSubnetValidatorsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.AddSubnetValidatorsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachPeer provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) AttachPeer(_a0 context.Context, _a1 *rpcpb.AttachPeerRequest) (*rpcpb.AttachPeerResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AttachPeer")
	}

	var r0 *rpcpb.AttachPeerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.AttachPeerRequest) (*rpcpb.AttachPeerResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.AttachPeerRequest) *rpcpb.AttachPeerResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.AttachPeerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.AttachPeerRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBlockchains provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) CreateBlockchains(_a0 context.Context, _a1 *rpcpb.CreateBlockchainsRequest) (*rpcpb.CreateBlockchainsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlockchains")
	}

	var r0 *rpcpb.CreateBlockchainsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.CreateBlockchainsRequest) (*rpcpb.CreateBlockchainsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.CreateBlockchainsRequest) *rpcpb.CreateBlockchainsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.CreateBlockchainsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.CreateBlockchainsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubnets provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) CreateSubnets(_a0 context.Context, _a1 *rpcpb.CreateSubnetsRequest) (*rpcpb.CreateSubnetsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubnets")
	}

	var r0 *rpcpb.CreateSubnetsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.CreateSubnetsRequest) (*rpcpb.CreateSubnetsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.CreateSubnetsRequest) *rpcpb.CreateSubnetsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.CreateSubnetsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.CreateSubnetsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshotNames provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) GetSnapshotNames(_a0 context.Context, _a1 *rpcpb.GetSnapshotNamesRequest) (*rpcpb.GetSnapshotNamesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshotNames")
	}

	var r0 *rpcpb.GetSnapshotNamesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.GetSnapshotNamesRequest) (*rpcpb.GetSnapshotNamesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.GetSnapshotNamesRequest) *rpcpb.GetSnapshotNamesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.GetSnapshotNamesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.GetSnapshotNamesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Health provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) Health(_a0 context.Context, _a1 *rpcpb.HealthRequest) (*rpcpb.HealthResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Health")
	}

	var r0 *rpcpb.HealthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.HealthRequest) (*rpcpb.HealthResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.HealthRequest) *rpcpb.HealthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.HealthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.HealthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBlockchains provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) ListBlockchains(_a0 context.Context, _a1 *rpcpb.ListBlockchainsRequest) (*rpcpb.ListBlockchainsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListBlockchains")
	}

	var r0 *rpcpb.ListBlockchainsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.ListBlockchainsRequest) (*rpcpb.ListBlockchainsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.ListBlockchainsRequest) *rpcpb.ListBlockchainsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.ListBlockchainsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.ListBlockchainsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRpcs provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) ListRpcs(_a0 context.Context, _a1 *rpcpb.ListRpcsRequest) (*rpcpb.ListRpcsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListRpcs")
	}

	var r0 *rpcpb.ListRpcsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.ListRpcsRequest) (*rpcpb.ListRpcsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.ListRpcsRequest) *rpcpb.ListRpcsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.ListRpcsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.ListRpcsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubnets provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) ListSubnets(_a0 context.Context, _a1 *rpcpb.ListSubnetsRequest) (*rpcpb.ListSubnetsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListSubnets")
	}

	var r0 *rpcpb.ListSubnetsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.ListSubnetsRequest) (*rpcpb.ListSubnetsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.ListSubnetsRequest) *rpcpb.ListSubnetsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.ListSubnetsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.ListSubnetsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadSnapshot provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) LoadSnapshot(_a0 context.Context, _a1 *rpcpb.LoadSnapshotRequest) (*rpcpb.LoadSnapshotResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for LoadSnapshot")
	}

	var r0 *rpcpb.LoadSnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.LoadSnapshotRequest) (*rpcpb.LoadSnapshotResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.LoadSnapshotRequest) *rpcpb.LoadSnapshotResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.LoadSnapshotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.LoadSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PauseNode provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) PauseNode(_a0 context.Context, _a1 *rpcpb.PauseNodeRequest) (*rpcpb.PauseNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PauseNode")
	}

	var r0 *rpcpb.PauseNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.PauseNodeRequest) (*rpcpb.PauseNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.PauseNodeRequest) *rpcpb.PauseNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.PauseNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.PauseNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RPCVersion provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) RPCVersion(_a0 context.Context, _a1 *rpcpb.RPCVersionRequest) (*rpcpb.RPCVersionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RPCVersion")
	}

	var r0 *rpcpb.RPCVersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.RPCVersionRequest) (*rpcpb.RPCVersionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.RPCVersionRequest) *rpcpb.RPCVersionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.RPCVersionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.RPCVersionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveNode provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) RemoveNode(_a0 context.Context, _a1 *rpcpb.RemoveNodeRequest) (*rpcpb.RemoveNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveNode")
	}

	var r0 *rpcpb.RemoveNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.RemoveNodeRequest) (*rpcpb.RemoveNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.RemoveNodeRequest) *rpcpb.RemoveNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.RemoveNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.RemoveNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveSnapshot provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) RemoveSnapshot(_a0 context.Context, _a1 *rpcpb.RemoveSnapshotRequest) (*rpcpb.RemoveSnapshotResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSnapshot")
	}

	var r0 *rpcpb.RemoveSnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.RemoveSnapshotRequest) (*rpcpb.RemoveSnapshotResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.RemoveSnapshotRequest) *rpcpb.RemoveSnapshotResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.RemoveSnapshotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.RemoveSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveSubnetValidator provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) RemoveSubnetValidator(_a0 context.Context, _a1 *rpcpb.RemoveSubnetValidatorRequest) (*rpcpb.RemoveSubnetValidatorResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSubnetValidator")
	}

	var r0 *rpcpb.RemoveSubnetValidatorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.RemoveSubnetValidatorRequest) (*rpcpb.RemoveSubnetValidatorResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.RemoveSubnetValidatorRequest) *rpcpb.RemoveSubnetValidatorResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.RemoveSubnetValidatorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.RemoveSubnetValidatorRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartNode provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) RestartNode(_a0 context.Context, _a1 *rpcpb.RestartNodeRequest) (*rpcpb.RestartNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RestartNode")
	}

	var r0 *rpcpb.RestartNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.RestartNodeRequest) (*rpcpb.RestartNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.RestartNodeRequest) *rpcpb.RestartNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.RestartNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.RestartNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResumeNode provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) ResumeNode(_a0 context.Context, _a1 *rpcpb.ResumeNodeRequest) (*rpcpb.ResumeNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ResumeNode")
	}

	var r0 *rpcpb.ResumeNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.ResumeNodeRequest) (*rpcpb.ResumeNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.ResumeNodeRequest) *rpcpb.ResumeNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.ResumeNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.ResumeNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveSnapshot provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) SaveSnapshot(_a0 context.Context, _a1 *rpcpb.SaveSnapshotRequest) (*rpcpb.SaveSnapshotResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveSnapshot")
	}

	var r0 *rpcpb.SaveSnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.SaveSnapshotRequest) (*rpcpb.SaveSnapshotResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.SaveSnapshotRequest) *rpcpb.SaveSnapshotResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.SaveSnapshotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.SaveSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendOutboundMessage provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) SendOutboundMessage(_a0 context.Context, _a1 *rpcpb.SendOutboundMessageRequest) (*rpcpb.SendOutboundMessageResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SendOutboundMessage")
	}

	var r0 *rpcpb.SendOutboundMessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.SendOutboundMessageRequest) (*rpcpb.SendOutboundMessageResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.SendOutboundMessageRequest) *rpcpb.SendOutboundMessageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.SendOutboundMessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.SendOutboundMessageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) Start(_a0 context.Context, _a1 *rpcpb.StartRequest) (*rpcpb.StartResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 *rpcpb.StartResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.StartRequest) (*rpcpb.StartResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.StartRequest) *rpcpb.StartResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.StartResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.StartRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) Status(_a0 context.Context, _a1 *rpcpb.StatusRequest) (*rpcpb.StatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 *rpcpb.StatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.StatusRequest) (*rpcpb.StatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.StatusRequest) *rpcpb.StatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.StatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.StatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) Stop(_a0 context.Context, _a1 *rpcpb.StopRequest) (*rpcpb.StopResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 *rpcpb.StopResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.StopRequest) (*rpcpb.StopResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.StopRequest) *rpcpb.StopResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.StopResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.StopRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamStatus provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) StreamStatus(_a0 *rpcpb.StreamStatusRequest, _a1 grpc.ServerStreamingServer[rpcpb.StreamStatusResponse]) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for StreamStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*rpcpb.StreamStatusRequest, grpc.ServerStreamingServer[rpcpb.StreamStatusResponse]) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransformElasticSubnets provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) TransformElasticSubnets(_a0 context.Context, _a1 *rpcpb.TransformElasticSubnetsRequest) (*rpcpb.TransformElasticSubnetsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TransformElasticSubnets")
	}

	var r0 *rpcpb.TransformElasticSubnetsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.TransformElasticSubnetsRequest) (*rpcpb.TransformElasticSubnetsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.TransformElasticSubnetsRequest) *rpcpb.TransformElasticSubnetsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.TransformElasticSubnetsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.TransformElasticSubnetsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// URIs provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) URIs(_a0 context.Context, _a1 *rpcpb.URIsRequest) (*rpcpb.URIsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for URIs")
	}

	var r0 *rpcpb.URIsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.URIsRequest) (*rpcpb.URIsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.URIsRequest) *rpcpb.URIsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.URIsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.URIsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) UpdateStatus(_a0 context.Context, _a1 *rpcpb.UpdateStatusRequest) (*rpcpb.UpdateStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *rpcpb.UpdateStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.UpdateStatusRequest) (*rpcpb.UpdateStatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.UpdateStatusRequest) *rpcpb.UpdateStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.UpdateStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.UpdateStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VMID provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) VMID(_a0 context.Context, _a1 *rpcpb.VMIDRequest) (*rpcpb.VMIDResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for VMID")
	}

	var r0 *rpcpb.VMIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.VMIDRequest) (*rpcpb.VMIDResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.VMIDRequest) *rpcpb.VMIDResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.VMIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.VMIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitForHealthy provides a mock function with given fields: _a0, _a1
func (_m *ControlServiceServer) WaitForHealthy(_a0 context.Context, _a1 *rpcpb.WaitForHealthyRequest) (*rpcpb.WaitForHealthyResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WaitForHealthy")
	}

	var r0 *rpcpb.WaitForHealthyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.WaitForHealthyRequest) (*rpcpb.WaitForHealthyResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpcpb.WaitForHealthyRequest) *rpcpb.WaitForHealthyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcpb.WaitForHealthyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpcpb.WaitForHealthyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedControlServiceServer provides a mock function with no fields
func (_m *ControlServiceServer) mustEmbedUnimplementedControlServiceServer() {
	_m.Called()
}

// NewControlServiceServer creates a new instance of ControlServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewControlServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ControlServiceServer {
	mock := &ControlServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
