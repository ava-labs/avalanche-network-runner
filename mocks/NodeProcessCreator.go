// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	local "github.com/ava-labs/avalanche-network-runner/local"
	mock "github.com/stretchr/testify/mock"

	node "github.com/ava-labs/avalanche-network-runner/network/node"

	time "time"
)

// NodeProcessCreator is an autogenerated mock type for the NodeProcessCreator type
type NodeProcessCreator struct {
	mock.Mock
}

// GetNodeVersion provides a mock function with given fields: config
func (_m *NodeProcessCreator) GetNodeVersion(config node.Config) (string, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeVersion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(node.Config) (string, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(node.Config) string); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(node.Config) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNodeProcess provides a mock function with given fields: config, startupTime, args
func (_m *NodeProcessCreator) NewNodeProcess(config node.Config, startupTime time.Duration, args ...string) (local.NodeProcess, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, config, startupTime)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NewNodeProcess")
	}

	var r0 local.NodeProcess
	var r1 error
	if rf, ok := ret.Get(0).(func(node.Config, time.Duration, ...string) (local.NodeProcess, error)); ok {
		return rf(config, startupTime, args...)
	}
	if rf, ok := ret.Get(0).(func(node.Config, time.Duration, ...string) local.NodeProcess); ok {
		r0 = rf(config, startupTime, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(local.NodeProcess)
		}
	}

	if rf, ok := ret.Get(1).(func(node.Config, time.Duration, ...string) error); ok {
		r1 = rf(config, startupTime, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNodeProcessCreator creates a new instance of NodeProcessCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeProcessCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeProcessCreator {
	mock := &NodeProcessCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
