// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	health "github.com/ava-labs/avalanchego/api/health"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// HealthClient is an autogenerated mock type for the Client type
type HealthClient struct {
	mock.Mock
}

// AwaitHealthy provides a mock function with given fields: ctx, freq
func (_m *HealthClient) AwaitHealthy(ctx context.Context, freq time.Duration) (bool, error) {
	ret := _m.Called(ctx, freq)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) bool); ok {
		r0 = rf(ctx, freq)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Duration) error); ok {
		r1 = rf(ctx, freq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Health provides a mock function with given fields: _a0
func (_m *HealthClient) Health(_a0 context.Context) (*health.APIHealthReply, error) {
	ret := _m.Called(_a0)

	var r0 *health.APIHealthReply
	if rf, ok := ret.Get(0).(func(context.Context) *health.APIHealthReply); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.APIHealthReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Liveness provides a mock function with given fields: _a0
func (_m *HealthClient) Liveness(_a0 context.Context) (*health.APIHealthReply, error) {
	ret := _m.Called(_a0)

	var r0 *health.APIHealthReply
	if rf, ok := ret.Get(0).(func(context.Context) *health.APIHealthReply); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.APIHealthReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Readiness provides a mock function with given fields: _a0
func (_m *HealthClient) Readiness(_a0 context.Context) (*health.APIHealthReply, error) {
	ret := _m.Called(_a0)

	var r0 *health.APIHealthReply
	if rf, ok := ret.Get(0).(func(context.Context) *health.APIHealthReply); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.APIHealthReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
