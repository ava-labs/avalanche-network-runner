syntax = "proto3";

option go_package = "github.com/ava-labs/avalanche-network-runner;rpcpb";

package rpcpb;

import "google/api/annotations.proto";

service PingService {
  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {
      post: "/v1/ping"
      body: "*"
    };
  }
}

message PingRequest {}

message PingResponse {
  int32 pid = 1;
}

service ControlService {
  rpc Start(StartRequest) returns (StartResponse) {
    option (google.api.http) = {
      post: "/v1/control/start"
      body: "*"
    };
  }

  rpc CreateBlockchains(CreateBlockchainsRequest) returns (CreateBlockchainsResponse) {
    option (google.api.http) = {
      post: "/v1/control/createblockchains"
      body: "*"
    };
  }

  rpc CreateSubnets(CreateSubnetsRequest) returns (CreateSubnetsResponse) {
    option (google.api.http) = {
      post: "/v1/control/createsubnets"
      body: "*"
    };
  }

  rpc Health(HealthRequest) returns (HealthResponse) {
    option (google.api.http) = {
      post: "/v1/control/health"
      body: "*"
    };
  }

  rpc URIs(URIsRequest) returns (URIsResponse) {
    option (google.api.http) = {
      post: "/v1/control/uris"
      body: "*"
    };
  }

  rpc Status(StatusRequest) returns (StatusResponse) {
    option (google.api.http) = {
      post: "/v1/control/status"
      body: "*"
    };
  }

  rpc StreamStatus(StreamStatusRequest) returns (stream StreamStatusResponse) {
    option (google.api.http) = {
      post: "/v1/control/streamstatus"
      body: "*"
    };
  }

  rpc RemoveNode(RemoveNodeRequest) returns (RemoveNodeResponse) {
    option (google.api.http) = {
      post: "/v1/control/removenode"
      body: "*"
    };
  }

  rpc AddNode(AddNodeRequest) returns (AddNodeResponse) {
    option (google.api.http) = {
      post: "/v1/control/addnode"
      body: "*"
    };
  }

  rpc RestartNode(RestartNodeRequest) returns (RestartNodeResponse) {
    option (google.api.http) = {
      post: "/v1/control/restartnode"
      body: "*"
    };
  }

  rpc Stop(StopRequest) returns (StopResponse) {
    option (google.api.http) = {
      post: "/v1/control/stop"
      body: "*"
    };
  }

  rpc AttachPeer(AttachPeerRequest) returns (AttachPeerResponse) {
    option (google.api.http) = {
      post: "/v1/control/attachpeer"
      body: "*"
    };
  }

  rpc SendOutboundMessage(SendOutboundMessageRequest) returns (SendOutboundMessageResponse) {
    option (google.api.http) = {
      post: "/v1/control/sendoutboundmessage"
      body: "*"
    };
  }

  rpc SaveSnapshot(SaveSnapshotRequest) returns (SaveSnapshotResponse) {
    option (google.api.http) = {
      post: "/v1/control/savesnapshot"
      body: "*"
    };
  }

  rpc LoadSnapshot(LoadSnapshotRequest) returns (LoadSnapshotResponse) {
    option (google.api.http) = {
      post: "/v1/control/loadsnapshot"
      body: "*"
    };
  }

  rpc RemoveSnapshot(RemoveSnapshotRequest) returns (RemoveSnapshotResponse) {
    option (google.api.http) = {
      post: "/v1/control/removesnapshot"
      body: "*"
    };
  }

  rpc GetSnapshotNames(GetSnapshotNamesRequest) returns (GetSnapshotNamesResponse) {
    option (google.api.http) = {
      post: "/v1/control/getsnapshotnames"
      body: "*"
    };
  }
}

message ClusterInfo {
  repeated string node_names       = 1;
  map<string, NodeInfo> node_infos = 2;
  int32 pid                        = 3;
  string root_data_dir             = 4;
  bool healthy                     = 5;

  // Maps from the node ID to its attached peer infos.
  map<string, ListOfAttachedPeerInfo> attached_peer_infos = 6;

  // Set to "true" once custom VMs are ready.
  bool custom_vms_healthy = 7;
  // The map of custom VM IDs in "ids.ID" format to its VM information.
  map<string, CustomVmInfo> custom_vms = 8;
  repeated string subnets          = 9;
}

message CustomVmInfo {
  string vm_name = 1;

  // VM ID in "ids.ID" format.
  string vm_id = 2;

  // Create subnet transaction ID -- subnet ID.
  // The subnet ID must be whitelisted by the avalanche node.
  string subnet_id = 3;

  // Create blockchain transaction ID -- blockchain ID>
  // The blockchain ID is used for RPC endpoints for the custom VM.
  string blockchain_id = 4;
}

message NodeInfo {
  string name                 = 1;
  string exec_path            = 2;
  string uri                  = 3;
  string id                   = 4;
  string log_dir              = 5;
  string db_dir               = 6;
  string plugin_dir           = 7;
  string whitelisted_subnets  = 8;
  bytes config                = 9;
}

message AttachedPeerInfo {
  string id = 1;
}

message ListOfAttachedPeerInfo {
  repeated AttachedPeerInfo peers = 1;
}

message StartRequest {
  string exec_path                    = 1;
  optional uint32 num_nodes           = 2;
  optional string whitelisted_subnets = 3;
  optional string global_node_config  = 4;
  // Used for both database and log files.
  optional string root_data_dir = 5;

  // Plugin directory to load all custom VM executables.
  // Must be non-empty to install custom VMs.
  optional string plugin_dir = 6;

  // The map of custom VM name to its genesis file path.
  //
  // The matching file with the name in "ids.ID" format must exist.
  // e.g., ids.ToID(hashing.ComputeHash256("subnetevm")).String()
  // e.g., subnet-cli create VMID subnetevm
  //
  // If this field is set to none (by default), the node/network-runner
  // does not install the custom VM and does not create the subnet,
  // even if the VM binary exists on the local plugins directory.
  map<string, string> custom_vms = 7;
  map<string, string> custom_node_configs = 8;
}

message StartResponse {
  ClusterInfo cluster_info = 1;
}

message BlockchainSpec {
  string vm_name = 1;
  string genesis = 2;
  optional string subnet_id = 3;
}

message CreateBlockchainsRequest {
  // The list of custom VM name, its genesis file path, and (optional) subnet id to use.
  //
  // The matching file with the name in "ids.ID" format must exist.
  // e.g., ids.ToID(hashing.ComputeHash256("subnetevm")).String()
  // e.g., subnet-cli create VMID subnetevm
  //
  // If this field is set to none (by default), the node/network-runner
  // will return error
  repeated BlockchainSpec blockchain_specs = 1;
}

message CreateBlockchainsResponse {
  ClusterInfo cluster_info = 1;
}

message CreateSubnetsRequest {
  optional uint32 num_subnets = 1;
}

message CreateSubnetsResponse {
  ClusterInfo cluster_info = 1;
}

message HealthRequest {}

message HealthResponse {
  ClusterInfo cluster_info = 1;
}

message URIsRequest {}

message URIsResponse {
  repeated string uris = 1;
}

message StatusRequest {}

message StatusResponse {
  ClusterInfo cluster_info = 1;
}

message StreamStatusRequest {
  int64 push_interval = 1;
}

message StreamStatusResponse {
  ClusterInfo cluster_info = 1;
}

message RestartNodeRequest {
  // Must be a valid node name.
  string name = 1;

  // Optional fields are set to the previous values if empty.
  optional string exec_path           = 2;
  optional string whitelisted_subnets = 3;

  // Used for both database and log files.
  optional string root_data_dir = 4;
}

message RestartNodeResponse {
  ClusterInfo cluster_info = 1;
}

message RemoveNodeRequest {
  string name = 1;
}

message RemoveNodeResponse {
  ClusterInfo cluster_info = 1;
}

message AddNodeRequest {
  string name = 1;
  StartRequest start_request = 2;
}

message AddNodeResponse {
  ClusterInfo cluster_info = 1;
}

message StopRequest {}

message StopResponse {
  ClusterInfo cluster_info = 1;
}

message AttachPeerRequest {
  string node_name = 1;
}

message AttachPeerResponse {
  ClusterInfo cluster_info = 1;
  AttachedPeerInfo attached_peer_info = 2;
}

message SendOutboundMessageRequest {
  string node_name = 1;
  string peer_id   = 2;
  uint32 op        = 3;
  bytes bytes      = 4;
}

message SendOutboundMessageResponse {
  bool sent = 1;
}

message SaveSnapshotRequest {
  string snapshot_name = 1;
}

message SaveSnapshotResponse {
  string snapshot_path = 1;
}

message LoadSnapshotRequest {
  string snapshot_name = 1;
  optional string exec_path = 2;
  optional string plugin_dir = 3;
  optional string root_data_dir = 4;
}

message LoadSnapshotResponse {
  ClusterInfo cluster_info = 1;
}

message RemoveSnapshotRequest {
  string snapshot_name = 1;
}

message RemoveSnapshotResponse {
}

message GetSnapshotNamesRequest {
}

message GetSnapshotNamesResponse {
  repeated string snapshot_names = 1;
}
